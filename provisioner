#!/usr/bin/env bash
export DEBIAN_FRONTEND=noninteractive

installpkg(){
    dpkg-query --status $1 >/dev/null || apt-get install -y --force-yes $1
}

# if using default php packages uncomment this line for install latest phalcon extension
#curl -s "https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh" | sudo bash

add-apt-repository ppa:ondrej/php -y

apt-get update
installpkg php7.0
installpkg php7.0-dom
installpkg php7.0-mysql
installpkg php7.0-fpm
installpkg php7.0-redis
installpkg php7.0-xdebug
installpkg php7.0-phalcon
installpkg zip
installpkg unzip
installpkg php7.0-zip
installpkg redis-server
installpkg mysql-server

# remove apache2 that is installed by default by php7.0 library
apt-get remove -y --force-yes apache2
installpkg nginx

# uncomment bellow if there is a problem with redis service start on startup
#update-rc.d redis-server remove
#update-rc.d redis-server start 80 2 3 4 5 . stop 20 0 1 6 .

# installing composer global
curl -Ss https://getcomposer.org/installer | php
mv composer.phar /usr/bin/composer


# allocating some swap to VM for running composer smoothly
/bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
/sbin/mkswap /var/swap.1
/sbin/swapon /var/swap.1

composer install -d ./code/

cp /tmp/001-talented.conf /etc/nginx/conf.d
service nginx restart

bootstrapdb(){
    cat <<EOF | mysql -uroot
    DROP DATABASE IF EXISTS samtt;
    CREATE DATABASE samtt;
    USE samtt;
    CREATE TABLE mo (
      id int NOT NULL auto_increment,
      msisdn varchar(20),
      operatorid int,
      shortcodeid int,
      text varchar(255),
      auth_token varchar(60),
      created_at DATETIME,
      PRIMARY KEY(id),
      KEY(created_at)
    ) ENGINE=InnoDB;
EOF
}
bootstrapdb

populate_db() {
    /tmp/populate_db 10000000| mysql -u root samtt
}
populate_db

cronjobinit() {
    # Adds a crontab entry to run cli main task for every minute

    # Cron expression
    cron="* * * * * php /home/vagrant/code/cli.php"

    # Escape all the asterisks so we can grep for it
    cron_escaped=$(echo "$cron" | sed s/\*/\\\\*/g)

    # Check if cron job already in crontab
    crontab -l | grep "${cronescaped}"
    if [[ $? -eq 0 ]] ;
      then
        echo "Crontab already exists. Exiting..."
      else
        # Write out current crontab into temp file
        crontab -l > mycron
        # Append new cron into cron file
        echo "$cron" >> mycron
        # Install new cron file
        crontab mycron
        # Remove temp file
        rm mycron
    fi
}
cronjobinit